### Example REST (use emacs restclient mode) calls to XTDB HTTP API
### Start a local database with:
### docker run --pull=always -tip 6543:3000 ghcr.io/xtdb/xtdb-standalone-ea

# variables
:url = http://localhost:6543

# Post a product
POST :url/tx
Content-Type: application/json

{"txOps": [{"sql": "INSERT INTO products (_id, name, description) VALUES (1, 'Fine leather jacket', 'A fine leather jacket for all pirating needs')"}]}

# query status
GET :url/status

# query from system txs table
POST :url/query
Content-Type: application/json

{"sql": "SELECT * FROM xt.txs"}

# query the product we inserted
POST :url/query
Content-Type: application/json

{"sql": "SELECT * FROM products"}

## Post multiple
POST :url/tx
Content-Type: application/json

{"txOps": [{"sql": "INSERT INTO products (_id, name, description, price) VALUES ($1, $2, $3, $4)",
            "argRows": [[1, "Fine leather jacket", "A fine leather jacket for all pirating needs", 29.95],
                        [2,"Log from Blammo", "It's big, it's heavy, it's wood", 4.20],
                        [3,"Illudium Q-36 explosive space modulator", "Is that pesky planet in the way of your view of Uranus? Blow it up.", 42069],
                        [4,"Ball", "It's a ball... nothing more to it", 7.99]]}]}

## Post customer, order and some order lines
## order 1 fine leather jacket and 10 balls
POST :url/tx
Content-Type: application/json

{"txOps": [{"sql": "INSERT INTO customer (_id, name, address) VALUES ($1,$2,$3)",
            "argRows": [[1, "Max Feedpressure", {"street": "Somestreet 6", "postalcode": "90210",
                                                 "country": "FI"}]]},
           {"sql": "INSERT INTO orders (_id, datetime, customer_id) VALUES ($1,$2,$3)",
            "argRows": [[1, {"@type": "xt:timestamp", "@value": "2024-08-14T16:40:55.666"}, 1]]},
           {"sql": "INSERT INTO orderline (_id, order_id, product_id, quantity) VALUES ($1,$2,$3,$4)",
            "argRows": [[1, 1, 1, 1],
                        [2, 1, 4, 10]]}]}

## Fetch the order, nesting the orderlines and the product info
POST :url/query
Content-Type: application/json

{"sql": "
SELECT *,
       NEST_MANY(SELECT *,
                        NEST_ONE(SELECT p.name,p.price
                                   FROM products p
                                  WHERE p._id=ol.product_id) as product
                   FROM orderline ol
                  WHERE ol.order_id=o._id) AS orderlines
  FROM orders o"}

## Increase prices by 10%, the above query will show wrong info!
POST :url/tx
Content-Type: application/json

{"txOps": [{"sql": "UPDATE products SET price = price * 1.10"}]}

## Fix the above query to take product prices for the
## order time!
## The subquery is complicated, you can't just say FOR VALID_TIME AS OF o.datetime
POST :url/query
Content-Type: application/json

{"sql": "
SELECT *,
       NEST_MANY(SELECT *,
                        NEST_ONE(SELECT p.name,p.price
                                   FROM products FOR ALL VALID_TIME p
                                  WHERE p._id=ol.product_id
                                    AND p._valid_from < o._valid_from
                                 ORDER BY p._valid_from DESC LIMIT 1) as product
                   FROM orderline ol
                  WHERE ol.order_id=o._id) AS orderlines
  FROM orders o"}

## select products at previous time before the increase
POST :url/query
Content-Type: application/json

{"sql": "SELECT p.name,p.price FROM products FOR SYSTEM_TIME AS OF $1 p",
 "queryOpts": {"args": [{"@type": "xt:timestamp",
                         "@value": "2024-08-14T20:00:00.000"}]}}